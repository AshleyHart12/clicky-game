{"version":3,"sources":["components/FriendCard/index.js","components/Title/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","onClick","setClicked","id","className","alt","name","src","image","Title","currentScore","bestScore","Footer","href","correctGuesses","clickMessage","App","state","friends","_this","clickedfriends","filter","friend","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","components_Title","score","bestSCore","map","match","components_FriendCard","key","components_Footer","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b8a9712.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nconst FriendCard = props => (\n    <div onClick = {() => props.setClicked(props.id)} className=\"card\">\n    <div className = \"img-container\">\n    <img alt={props.name} src={props.image} />\n    \n    </div>\n    </div>\n);\n\n// function FriendCard(props) {\n//     return(\n//         <div className=\"card\">\n//         <div className=\"img-container\">\n//             <img alt={props.name} src={props.image} />        \n//         </div>\n//         {/* Make on click functin inside span tag? */}\n//         <span></span>\n        \n//   </div>\n\n//     );\n// }\n\n\nexport default FriendCard;","import React from \"react\";\nimport \"./style.css\";\n\n\n\n\nfunction Title(props) {\n    return (\n      <div className=\"align-items-center jumbotron header-hgt header-pad head-mar-top nav-shadow text-center text-center\">\n       \n        <h1 className=\"titleHead\">\n          Crossfit Throwdown\n        </h1>\n        <br></br>\n        <h3>\n        Current Score: {props.currentScore}\n        <br></br>\n        Best Score: {props.bestScore}\n      </h3>\n      </div>\n    );\n  }\n\n// const Title = props => (\n//   <div>\n//     <ul>\n//       <li>Current Score: {props.score}</li>\n//       <li>Best Score: {props.besScore}</li>\n//     </ul>\n//   </div>\n// )\n\nexport default Title;","import React from \"react\";\n\nfunction Footer() {\n    return (\n      <div className=\"colors position-relative footer footer-100 footer-mgn navbar p-0\">\n        <span className=\"text-muted\" />\n        <div className=\"copyright\"> &copy; 2019 | <a href=\"https://github.com/AshleyHart12/clicky-game\">Ashley Hart</a></div>\n      </div>\n    );\n  }\n\n  export default Footer;\n\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport FriendCard from \"./components/FriendCard\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n// import NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\n\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on an image to earn points, but don't click on one more than once or you'll have to start over!\"\n\nclass App extends Component {\n\nstate = {\n  friends,\n  correctGuesses,\n  bestScore,\n  clickMessage\n};\n\nsetClicked = id => {\n  const friends = this.state.friends;\n\n  const clickedfriends = friends.filter(friend => friend.id === id);\n\nif (clickedfriends[0].clicked) {\n  console.log(correctGuesses);\n  console.log(bestScore);\n\n  correctGuesses = 0;\n  clickMessage = \"What are you doing? You already clicked that one! Sorry, you gotta start over now.\"\n\n  for (let i = 0; i < friends.length; i++) {\n    friends[i].clicked = false;\n  }\n  \nthis.setState({clickMessage});\nthis.setState ({correctGuesses});\nthis.setState({friends});\n\n} else if (correctGuesses < 8) {\n  clickedfriends[0].clicked = true;\n\n  correctGuesses++;\n\n  if (correctGuesses > bestScore){\n    bestScore = correctGuesses;\n    this.setState({bestScore});\n  }\n\n  friends.sort(function(a,b) {return 0.5 - Math.random()});\n\n  this.setState({friends});\n  this.setState({correctGuesses});\n  this.setState({clickMessage});\n} else {\n  clickedfriends[0].clicked = true;\n\n  correctGuesses = 0;\n\n  clickMessage = \"Wow, great job! Bet you can't do it again....Give it a try!\";\n  bestScore = 8;\n  this.setState({bestScore});\n\n  for (let i = 0; i < friends.length; i++) {\n    friends[i].clicked = false;\n  }\n\n  friends.sort(function() {\n    return 0.5 - Math.random()\n  });\n\n  this.setState({friends});\n  this.setState({correctGuesses});\n  this.setState({clickMessage});\n}\n};\n\n  render() {\n    return (\n      <div className=\"fluid-container\">\n      {/* <NavBar /> */}\n    \n        \n      <Title className=\"bg-header row\"\n        score={correctGuesses}\n        bestSCore={bestScore}\n      \n      />\n    \n\n      <div className=\"d-flex justify-content-center main-content mx-auto flex-wrap row\">\n        {this.state.friends.map(match => (\n          // eslint-disable-next-line no-unused-expressions\n          <FriendCard\n          setClicked={this.setClicked}\n          id={match.id}\n          key={match.id}\n          image={match.image}\n          />\n        ))}\n      </div>\n      \n  <Footer className=\"footer-mgn row\" />\n\n      </div>\n    );\n  }\n} // ENDS COMPONENT\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}